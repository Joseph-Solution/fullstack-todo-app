name: CI/CD Pipeline - Build and Deploy to AWS

on:
  push:
    branches: [ release ]

jobs:
  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (static keys only)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists and normalize name
        run: |
          ECR_REPOSITORY_RAW="${{ secrets.ECR_REPOSITORY }}"
          # trim whitespace and remove CR characters
          ECR_REPOSITORY_TRIM=$(printf "%s" "$ECR_REPOSITORY_RAW" | tr -d '\r' | sed 's/^[ \t]*//;s/[ \t]*$//')
          if [ -z "$ECR_REPOSITORY_TRIM" ]; then
            echo "ECR_REPOSITORY is empty after trim" >&2; exit 1;
          fi
          echo "ECR_REPOSITORY_TRIM=$ECR_REPOSITORY_TRIM" >> $GITHUB_ENV
          # ensure repository exists
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY_TRIM" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPOSITORY_TRIM" >/dev/null

      - name: Compute image URIs
        run: |
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          BACKEND_TAG="backend-${{ github.sha }}"
          FRONTEND_TAG="frontend-${{ github.sha }}"
          echo "BACKEND_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY_TRIM:$BACKEND_TAG" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY_TRIM:$FRONTEND_TAG" >> $GITHUB_ENV

      - name: Normalize ECS names
        run: |
          CLUSTER_RAW='${{ secrets.ECS_CLUSTER_NAME }}'
          SVC_BACKEND_RAW='${{ secrets.ECS_BACKEND_SERVICE_NAME }}'
          SVC_FRONTEND_RAW='${{ secrets.ECS_FRONTEND_SERVICE_NAME }}'
          # trim spaces/CR and strip any surrounding quotes
          CLUSTER_TRIM=$(printf "%s" "$CLUSTER_RAW" | tr -d '\r' | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '"' | tr -d "'")
          SVC_BACKEND_TRIM=$(printf "%s" "$SVC_BACKEND_RAW" | tr -d '\r' | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '"' | tr -d "'")
          SVC_FRONTEND_TRIM=$(printf "%s" "$SVC_FRONTEND_RAW" | tr -d '\r' | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '"' | tr -d "'")
          if [ -z "$CLUSTER_TRIM" ]; then echo "ECS_CLUSTER_NAME is empty after normalization" >&2; exit 1; fi
          echo "ECS_CLUSTER_TRIM=$CLUSTER_TRIM" >> $GITHUB_ENV
          echo "ECS_BACKEND_SERVICE_TRIM=$SVC_BACKEND_TRIM" >> $GITHUB_ENV
          echo "ECS_FRONTEND_SERVICE_TRIM=$SVC_FRONTEND_TRIM" >> $GITHUB_ENV

      - name: Preflight - ensure cluster exists
        run: |
          set -euo pipefail
          echo "Verifying ECS cluster '$ECS_CLUSTER_TRIM' in region $AWS_REGION"
          if ! aws ecs describe-clusters --clusters "$ECS_CLUSTER_TRIM" --query 'clusters[?clusterName==`'"$ECS_CLUSTER_TRIM"'`].status' --output text | grep -q "ACTIVE"; then
            echo "Cluster not found. Creating '$ECS_CLUSTER_TRIM'..."
            aws ecs create-cluster --cluster-name "$ECS_CLUSTER_TRIM" >/dev/null
          else
            echo "Cluster exists."
          fi
          echo "Clusters now:" && aws ecs list-clusters --output text | cat

      - name: Build and push backend image
        run: |
          docker build -t "$BACKEND_IMAGE_URI" -f server/Dockerfile ./server
          docker push "$BACKEND_IMAGE_URI"

      - name: Build and push frontend image
        run: |
          docker build -t "$FRONTEND_IMAGE_URI" -f client/Dockerfile ./client
          docker push "$FRONTEND_IMAGE_URI"

      - name: Update backend task definition
        run: |
          # 替换任务定义文件中的占位符
          sed -i "s|ACCOUNT_ID|${{ secrets.AWS_ACCOUNT_ID }}|g" aws/task-definition-backend.json
          sed -i "s|REGION|${{ secrets.AWS_REGION }}|g" aws/task-definition-backend.json
          sed -i "s|REPOSITORY_NAME|$ECR_REPOSITORY_TRIM|g" aws/task-definition-backend.json
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" aws/task-definition-backend.json

      - name: Update frontend task definition
        run: |
          # 替换任务定义文件中的占位符
          sed -i "s|ACCOUNT_ID|${{ secrets.AWS_ACCOUNT_ID }}|g" aws/task-definition-frontend.json
          sed -i "s|REGION|${{ secrets.AWS_REGION }}|g" aws/task-definition-frontend.json
          sed -i "s|REPOSITORY_NAME|$ECR_REPOSITORY_TRIM|g" aws/task-definition-frontend.json
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" aws/task-definition-frontend.json

      - name: Deploy backend to ECS
        run: |
          # 注册新的任务定义
          aws ecs register-task-definition --cli-input-json file://aws/task-definition-backend.json
          
          # 更新服务
          aws ecs update-service \
            --cluster "$ECS_CLUSTER_TRIM" \
            --service "$ECS_BACKEND_SERVICE_TRIM" \
            --task-definition todo-backend

      - name: Deploy frontend to ECS
        run: |
          # 注册新的任务定义
          aws ecs register-task-definition --cli-input-json file://aws/task-definition-frontend.json
          
          # 更新服务
          aws ecs update-service \
            --cluster "$ECS_CLUSTER_TRIM" \
            --service "$ECS_FRONTEND_SERVICE_TRIM" \
            --task-definition todo-frontend

      # 暂不执行等待与健康检查（未扩容前副本为0，且可能尚无RDS）